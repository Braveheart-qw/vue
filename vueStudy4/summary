vue进阶
    1.数据请求
    有些网站不需要进行反向配置，因为，该网站已经提供网站数据接口给开发者了，网站出现  Access-Control-Allow-Origin：* 就是提供给开发者数据了。
    【问题】为什么有些网站明明已经配置了Access-Control-Allow-Origin: *，还取不到数据呢。
    答：因为该网站的确提供了开发者请求数据的可能，但是为了防止恶意请求数据，造成服务器崩溃，需要在axios中设置该网站提供的信息。以前书写的
    axios.get("url").then((res) =>{

    })请求数据方式为简写方式。
    axios({
        method:""  //请求方式 post || get   默认get
        url:"",
        headers:{
            //可以配置请求头
            如果要为了解决上面的问题，就要配置该网站提供的↓
            X-Client-Info: "",
            X-Host: "",
        }
    }).then((res)=>{

    })

    2.iconfont图标字体
        1.可以以网络请求图标字体的地址来显示图标字体 见 2.html
        缺点：可选择性小，只能根据网站现有的来
             需要将图标转换成 base64 编码

        2.自己下载图标库，放在vue-cli脚手架的public文件夹中，然后引用

    3.swiper 学习
        3.1 下载swiper库
        cnpm install swiper --save-dev
        使用  见3_1.html

    4.项目吸顶效果
      通过判断滚动条的值来执行的一系列的逻辑代码
      知识点：1.获取当前有效的scroll值   document.documentElement.scrollTop            （BOM）
             2.获取当前有效的元素宽度，可以利用dom操作（但是在vue开发中是不建议的），使用ref,可以获取dom节点 【注意】获取高度的时候要确保该元素具有高度

      【问题】1.position:fixed 设置之后将会脱离文档流，并且样式都会失效，可以重新设置，具有该样式的元素将会透明状，可以重新设置背景色。
             2.document.documentElement.scrollTop 失效的原因，在vue中设置了overflow:auto属性，因为vue单页面文件，是将每一个dom片段拼凑起来的，
             3.为什么vue项目会报一些 变量未定义的错误，因为，当数据没进来时，html结构模板已经渲染一遍了，这时候模板中的值，全部未定义
             【解决方案】数据没进来前 让模板不渲染，使用v-if

    5.batter-scroll
     【功能】更好的提升用户体验
      知识点：1.下载batter-scroll
            cnpm install batter-scroll --save-dev

             2.使用方法
             见官网

            2.小技巧（动态设置内联样式）
            动态设置样式 :style="myStyle"  myStyle是对象

     6.事件总线实例
     【问题】众所周知在vue项目开发中，可以利用事件总线来解决非父子组件之间的关系，但是监听和推送的事件总线对象 必须是同一个，而对于vue的模块化开发，不能像
            以前一样在当前组件生成一个总线对象，必须作为一个单独的文件存放，然后利用es6的导出，使用的时候使用es6的导入，这样所有组件使用的事件总线对象都是同一个。

            在项目中开发：1.在src下新建一个bus文件夹，
                         2.在bus文件夹下新建一个bus.js文件
                         3.bus.js 文件内容  const bus = new Vue();
                                            export default bus;
                         4.需要的时候引入即可

     7.vueX状态管理器
        在使用事件总线来解决非父子通信的问题时，会伴随着，代码耦合度过高，以及事件重名一系列问题，因此我们引入vueX的技术
        7.1 什么是vueX？
            vueX是状态管理器，存放项目中公共的状态，vueX是作为一个单独的模块存放的，所以这些状态起到了全局的作用。
            图：见vuex.png

        7.2 访问vuex
            this.$store

        7.3 vueX的代码结构 见store/index.js文件，因为我们在创建脚手架时，已经选择默认配置vuex了，入口文件中也被默认导入了。

        【注意】vuex是状态管理器，而不是专门解决父子通信问题的技术，只是，在管理状态时，恰好的可以更高效的解决非父子通信的问题
        【问题】vuex的所保存的状态任何人都可以使用，具有不安全性，在开发中大型的项目时，团队中的其它成员修改了你在vuex中所保存的状态时，就会出现问题。并且在很难找到bug，因此我们
                需要在操作vuex时，添加监控。

              解决方案：  1.不能直接操作vuex中的state对象（可以直接访问）
                         2.通过 this.$store.commit("functionName" , 参数) 来调用vueX中的mutations对象里对应的函数（该函数存放的是修改状态的代码）
                         3.通过第二步操作，开发人员访问的操作流程都已经被监控，如果想要调试vuex中的bug，使用指定的第三方工具（devtools）就可以查看具体操作流程。
                         【注意】devtools工具是安装在浏览器中的插件，安装成功后可以看到地址栏上有一个vue的图标












