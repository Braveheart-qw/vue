vue进阶

       5.1 slot
            在组件中会存在一个问题，父组件引用子组件，引用的自定义组件标签中写入其它标签，vue 默认是无法识别的，如：
            child是自定义组件
            <child>
                <div>新写入的标签布局，无法被vue识别，因此不会实现</div>
            </child>

            但是：我们想实现以上的效果，应该如何？
            答：在自定义组件中加入slot插槽
            如： Vue.component("child",{
                template:`
                    <slot></slot>  这里的意思，就是字面意思，在自定义组件留下一个坑位，这样就可以在外部插入标签
                `
            })

            使用场景：更加灵活

       5.2 具名插槽
            多个标签可以插入到一个slot插槽中，没有规律可循，如果我希望p标签和a标签插入到不同slot插槽中，需要给插槽取名，

            <slot name="p"></slot>
            <slot name="a"></slot>

            将p标签插入到p插槽
            <p slot="p"></p>

             将a标签插入到a插槽
             <a slot="a"></a>

       5.3 transition过渡
            Vue在插入、更新或者移除DOM时，提供多种不同方式的应用过渡效果，所以说，vue提供的效果，并不是代替CSS3中的transition，而是
            提供了一种动画自动解决方案

            5.3.1 单个元素过渡 见5_3_1.html

            5.3.2 多个元素过渡
                当有相同标签名的元素切换时，需要通过key特性设置唯一的值来标记以让Vue区分它们，否则Vue为了效率只会替换相同标签内部的内容 (df算法)

            5.3.3 多个组件过渡
                用法相同

       5.4 列表过渡
            使用<transition-group>


            【注意】该内置标签 默认会自动实例化出一个span标签，如果在列表中，根据ul-li 标签紧密联系的特点，我们可以直接用<transition-group tag="ul">实例化出一个ul
            标签，（因此原先的ul删除，使用实例化出的ul标签）

       5.5 生命周期
            Vue提供了8个钩子函数（也就是对应生命周期的方法）
            beforeCreate
            created
            beforeMount
            mounted

            【注意】这两个有关视图更新的生命周期，只有在视图被更新时才会调用
            beforeUpdate
            updated

            beforeDestroy
            destroyed

       5.6 利用mounted初始化数据
            小案例，请求猫眼数据
            知识点：过滤器
            Vue.filter('过滤器名称' , callback{
                return 
            })

       5.7 自定义指令
        使用场景：可以操作底层dom
        vue提供的钩子函数(
            参数 el,binding,vnode
            bind,inserted,update,componentUpdated,unbind
        )
        【注意】vue学完之后，补一下p651 和 p654两个关于swiper的用法

        5.8 整理组件化项目
            在很多Vue项目中，我们使用Vue.component来定义全局组件，紧接着用
            new Vue()实例化。但是在较为复杂的项目中将会出现以下问题
            1.项目结构混乱
            2.全局定义：强制要求每个组件名不能重复
            3.高亮显示：代码出错会有提示
            3.不支持css: 无法加上css样式，不符合一个组件化的规范(dom、js、style)
            4.没有构建步骤：只能使用html和es5，不可以使用预处理器

            因此我们为了解决以上问题优化项目结构提出以下解决方案 ↓
            1.单文件组件(每个文件只存放一个组件,该文件包括(dom、js、style))
               格式规范见 5_8_1.vue
            【问题】这时候浏览器是无法识别vue文件，因此我们需要自己配置vue信息让浏览器识别(webpack工具已经帮我们配置好，直接使用就行了，不过在这里我们并没有学习webpack，
            因此我们直接使用vue提供的脚手架（也包括让浏览器识别vue文件，这是vue生态中提供的工具）)

            vue脚手架的下载:
                    cnpm install -g @vue/cli    使用全局安装（可以使用本地安装但没必要，因为插件是常用的）

            脚手架的使用:
                    在当前项目终端：vue create 名字
                    【注意】创建脚手架过程需要进行配置，配置之后下载过程中可能会出现问题，sass无法正确安装

                    【解决方案】这时候需要下载的插件信息，已经全部保存到package.json文件当中，我们可以删除已经下载的node_modules文件，
                    直接在package.json同级别的文件终端下执行 cnpm install(下载package.json中存在的插件信息)

                    配置完成的脚手架目录结构
                    见vue_cli文件夹下的myapp文件夹

                    【入口文件】main.js

                    启动项目：npm run serve
                    项目打包：npm run build
                    项目检查：npm run lint

            一个文件一个组件，那么如何引入其它组件，并且使用引入的组件
            1.import 组件名 from 路径

            2.注册组件
            全局注册：Vue.component("组件名",组件名);
            局部注册：components:{
                组件名:组件名
            }
            【注意】局部注册是卸载vue体里面

            【注意】在style的属性添加 scoped 这样就可以实现当前样式影响自己的组件（局部生效），这样就可以避免全局css影响

            【总结】1.nup run build 打包项目之后，将dist文件夹交给后端就行了【复制dist文件夹下的所有文件到后端项目中】
                    2.组件不要使用内置标签名  比如出现footer标签
                    3.前面学习的slot具名插槽已经废弃，现在改用v-slot，使用具名插槽的时候必须使用template包裹，如：
                    <template v-slot:插槽名>
                        插槽内容
                    </template>


          5.9 vue配置
                5.9.1 反向代理配置
                当前端向后端请求的数据不在同一个网站，就会出现跨域问题。
                解决方案：1.自己进行vue配置，实现跨域 ，【原理】将请求的网站交给vue代理
                        实现步骤：
                                1.创建配置文件(和package.json同级)
                                2.module.exports = {
                                      devServer: {
                                          proxy: {
                                              //'ajax'是拦截器
                                              '/ajax': {
                                                  target: 'https://m.maoyan.com/',      //主机名
                                                  //ws: true,
                                                  changeOrigin: true
                                              },
                                          }
                                      }
                                  }

           5.10 vue-router
                功能：控制路径
                下载：在配置脚手架时，已经下载了vue-router
                使用：在下载成功的情况下，router/index.js
                如何控制路由呢？
                见index.js 中的解释

                当路由地址改变时，说明用户可见视图已经发生改变
                在主视图里面留下一个<router-view></router-view>标签，路由会自动将访问的地址所对应的组件加载进去
                【问题】router-view 和 component 标签区别
                router-view ： 更加倾向于整个视图的改变 比如从“首页” 跳转至 “个人中心”，地址栏会发生改变，路由管理器会自动找到对应的整个视图组件(像这种的组件都存放在views文件夹中)
                component: 比如“首页”中的 电视剧 和 电影 组件的切换，地址栏不会发生改变



            【注意】公共组件推荐放在components文件夹中，物理上的视图 存放在views文件夹中 如下：
            个人中心组件：views文件夹
            菜单栏：components文件夹中

            5.11 声明式路由和编程式路由
            #/路径名

            vue 提供了一个 <router-link></router-link>
            例如：<router-link to="/film" tag="li" activeClass="styleName">film</router-link>
            to: 代表的是跳转的路径
            tag：代表的是将该条<router-link>渲染成 想要的标签  tag="li" 渲染成li 标签
            activeClass：代表的高亮样式   styleName：样式名

            编程式路由：写在script里的
            格式：this.$router.push("路径名/参数");
            【注意】这时候 /参数 是被误认为是路径，然后默认匹配到路由里面，但是路由里面并没有设置这种类型的路径，
            所有想要vue认定他是 参数，就要使用动态路由5.13

            5.12 二级路由和重定向
            redirect:  重定向      【用处】解决一个网站两个独立组件的跳转  降低耦合
            例如：redirect: "/home"   后面跟组件
                重定向到home组件

            二级路由就是写在一级路由里面
            children:[
                path: 路径名
                component: 组件名
            ]

            5.13 动态路由
            【格式】  路径/:id    :id 是一个接收参数的名称，接收方可以使用this.$router.params.id 来接受，必须加冒号，否则会被vue认为是路径

            5.14 命名路由
                可以在路由里面起名字
                例如：name: name
                【用处】可以通过名字跳转

            5.15 vue-history
                mode：'history'  模式路径中没有#  但是需要在后台配置，详情见官网，vue-cli服务器已经配置了
                mode: 'hash'  模式路径中带有#

            5.16 路由拦截
            在路由配置中配置：
            全局拦截：
            router.beforeEach((to,from,next) =>{
            只要进行路由跳转，都会被拦截下来，进入此逻辑代码区
                模拟一个判断是否登录的例子
                跳转至个人中心，首先判断是否已经登录
                if(to.path === '/center'){
                    if(已经登录){
                        next()  //用来跳转的
                    }else{
                        next("/login")
                    }
                }
            })

            局部拦截：
            beforeRouterEnter(to,from,next){
                在路由被成功创建前，就被拦截
            }

            beforeRouterUpdate(to,from,next){
                在当前路由发生更新，拦截器会被调用
            }

            beforeRouterLeave(to,from,next){
                离开当前路由时，会被调用
            }


































