vue进阶

       5.1 slot
            在组件中会存在一个问题，父组件引用子组件，引用的自定义组件标签中写入其它标签，vue 默认是无法识别的，如：
            child是自定义组件
            <child>
                <div>新写入的标签布局，无法被vue识别，因此不会实现</div>
            </child>

            但是：我们想实现以上的效果，应该如何？
            答：在自定义组件中加入slot插槽
            如： Vue.component("child",{
                template:`
                    <slot></slot>  这里的意思，就是字面意思，在自定义组件留下一个坑位，这样就可以在外部插入标签
                `
            })

            使用场景：更加灵活

       5.2 具名插槽
            多个标签可以插入到一个slot插槽中，没有规律可循，如果我希望p标签和a标签插入到不同slot插槽中，需要给插槽取名，

            <slot name="p"></slot>
            <slot name="a"></slot>

            将p标签插入到p插槽
            <p slot="p"></p>

             将a标签插入到a插槽
             <a slot="a"></a>

       5.3 transition过渡
            Vue在插入、更新或者移除DOM时，提供多种不同方式的应用过渡效果，所以说，vue提供的效果，并不是代替CSS3中的transition，而是
            提供了一种动画自动解决方案

            5.3.1 单个元素过渡 见5_3_1.html

            5.3.2 多个元素过渡
                当有相同标签名的元素切换时，需要通过key特性设置唯一的值来标记以让Vue区分它们，否则Vue为了效率只会替换相同标签内部的内容 (df算法)

            5.3.3 多个组件过渡
                用法相同

       5.4 列表过渡
            使用<transition-group>


            【注意】该内置标签 默认会自动实例化出一个span标签，如果在列表中，根据ul-li 标签紧密联系的特点，我们可以直接用<transition-group tag="ul">实例化出一个ul
            标签，（因此原先的ul删除，使用实例化出的ul标签）

       5.5 生命周期
            Vue提供了8个钩子函数（也就是对应生命周期的方法）
            beforeCreate
            created
            beforeMount
            mounted

            【注意】这两个有关视图更新的生命周期，只有在视图被更新时才会调用
            beforeUpdate
            updated

            beforeDestroy
            destroyed

       5.6 利用mounted初始化数据
            小案例，请求猫眼数据
            知识点：过滤器
            Vue.filter('过滤器名称' , callback{
                return 
            })

       5.7 自定义指令
        使用场景：可以操作底层dom
        vue提供的钩子函数(
            参数 el,binding,vnode
            bind,inserted,update,componentUpdated,unbind
        )
        【注意】vue学完之后，补一下p651 和 p654两个关于swiper的用法

        5.8 整理组件化项目
            在很多Vue项目中，我们使用Vue.component来定义全局组件，紧接着用
            new Vue()实例化。但是在较为复杂的项目中将会出现以下问题
            1.项目结构混乱
            2.全局定义：强制要求每个组件名不能重复
            3.高亮显示：代码出错会有提示
            3.不支持css: 无法加上css样式，不符合一个组件化的规范(dom、js、style)
            4.没有构建步骤：只能使用html和es5，不可以使用预处理器

            因此我们为了解决以上问题优化项目结构提出以下解决方案 ↓
            1.单文件组件(每个文件只存放一个组件,该文件包括(dom、js、style))
               格式规范见 5_8_1.vue
            【问题】这时候浏览器是无法识别vue文件，因此我们需要自己配置vue信息让浏览器识别(webpack工具已经帮我们配置好，直接使用就行了，不过在这里我们并没有学习webpack，
            因此我们直接使用vue提供的脚手架（也包括让浏览器识别vue文件）)

            vue脚手架的下载:
                    cnpm install -g @vue/cli    使用全局安装（可以使用本地安装但没必要，因为插件是常用的）

            脚手架的使用:
                    在当前项目终端：vue create 名字
                    【注意】创建脚手架过程需要进行配置，配置之后下载过程中可能会出现问题，sass无法正确安装

                    【解决方案】这时候需要下载的插件信息，已经全部保存到package.json文件当中，我们可以删除已经下载的node_modules文件，
                    直接在package.json同级别的文件终端下执行 cnpm install(下载package.json中存在的插件信息)

                    配置完成的脚手架目录结构
                    见vue_cli文件夹下的myapp文件夹

                    【入口文件】main.js

                    启动项目：npm run serve
                    项目构建：npm run build
                    项目检查：

                    

























