vue的学习
    1.什么是vue？
    答：是一套构建用户界面的渐进式框架，

        特点：
        自底向上框架
        vue的核心库只关注视图层，易于上手
        配合现代化的工具链以及各种类库的支持，也可以实现复杂的单页应用提供驱动

    2.安装
        2.1 可以将vue下载到本地

        2.2 使用cnd引入vue(同bootstrap的cnd 引入相同)

    3.使用
        vue的模板语法
            3.1 插值：
                vue实例化，并且可以渲染变量值，实例化之后，插值里面的区域会被当成js代码对待，也就是{{}}区域，见vue 3_1.html

            3.2 指令:
                如果我想在网页渲染标签，在插值区域无法被直接渲染，需要使用v-html指令，然后通过data对象里面 渲染成想要的标签，为什么
                vue的作者不直接渲染标签，而要使用v-html指令，因为需要防止别人的恶意注入，v-html指令可以做到必须是自己信任的标签渲染，在可以成功渲染到
                网页,见3_2.html

            3.3 绑定：
                通过vue提供的绑定 来实现class 和 style 的动态添加 见3_3.html
                【注】在class 和 style的 对象方法中存在一个共同的问题，后续对对象的操作都无法生效，为什么会无法生效，在3.7中有解释，因为无法被vue检测，导致视图不更新，
                    解决方案 3.7中的方法2，


            3.4 条件渲染和循环遍历
                v-if 和 v-else 同 if 和 else功能相同， v-for 同 for功能相同

            3.5 列表渲染
                通过v-for来实现动态增加减少列表中的内容
                【注】v-for 遍历数组 如： v-for="data in datalist"  datalist是数组名  如果想获取数组下标写法应该是 v-for = "(data,index) in datalist "
                     v-for 遍历对象 如： v-for="data in obj"        obj 是对象名      如果想获取对象的key值，   v-for = "(data,key) in obj"
                     将in 改成of 也是可以的，和js相同

            3.6 在3.5的列表渲染中需要注意应该在循环语句后面添加key值，并将key设置成每项都有并且是唯一的id,如v-for="data in datalist"  key="data.id"
                问题：为什么要设置key值？
                             key值的特点:
                                    1.跟踪每个节点得身份，从而重用和重新排序现有元素
                                    2.理想得key值是每项都有并且是唯一的id，如data.id

            3.7 列表数组检测
                    源数组改变，vue视图将会更新(被vue检测)
                    原数组没有改变，将不会更新(无法被vue检测)
                    【注意】改变下标对应的值，虽然也对源数组产生了改变，但是vue视图并不会更新(无法被vue检测)，如果我们必须改变对应下标的值，我们有如下解决方案
                            1.使用splice;
                            2.使用Vue.set(参数1，index , 参数3)
                                参数1： 数组名 或者 对象名
                                index：下标 或者 key
                                参数3：替换的值

            3.8 列表过滤        (小技巧知识点，模糊查询)
                做一个搜索框下拉列表的功能
                用到的知识点 @input 事件，@input 每次改变都会触发事件
                双向绑定 v-model ，具体使用 如：v-model="mytext"  ，这时候vue实例化里面的mytext随着input标签里面的text值变化


            3.9 事件修饰符
                如@click.stop   ，.stop代表的意思是自动关闭事件冒泡。 原生js中使用 ev.stopPropagation() 关闭事件冒泡
                  @click.prevent , .prevent是阻止执行默认事件，如：表单的提交按钮，一旦提交就会跳转页面，而一般在项目中，我们应该先进行验证
                  @click.self , .self 代表的意思是，触发的事件源必须是自己，才会被触发，如，子元素事件冒泡触发了父元素的事件，如果父元素事件带有.self修饰符，则不会执行事件，
                  因为触发的数据源不是父元素自己，而是他的子元素通过事件冒泡来触发的
                  @click.once  , .once 代表的意思是只会执行一次

            3.10 按键修饰符
                如@keyup.键值   .键值：需要的键值，如 监听enter回车键，就是@keyup.13  ,回车键对应的键值就是13

            3.11 双向数据绑定
                v-model         使用场景：表单绑定   text类型中绑定的是value值，checkbox绑定的是选中状态   ，多选需要使用数组
                v-model.lazy    使用场景：v-model是时时刻刻都在变化(只要值发生变化),而加上 .lazy 是失去焦点才会改变vue实例化中的值
                v-model.number  使用场景：只会获取纯数字(鸡肋，一开始输入汉字就会失效)
                v-model.trim    使用场景：消除字符串中首尾空格


            3.12 购物车案例
                见3_12.html,【注意】@click在实例化数据改变前触发，（优先触发）
                                    @change在实例化数据改变后触发(后触发)

            3.13 axios与fetch实现数据请求（单独的库  和vue并没有联系，只是为了解决vue中数据请求的问题，【问题】为什么不使用原生js或者jquery，答：因为原生js的ajax中的XMLHttpRequest
            是一个设计十分粗糙的API，配置和调用方式十分混乱，不使用jquery的原因就是，节省资源，为了一个小小的数据请求功能，就需要导入一个jquery的库不划算）

                fetch：w3c的标准
                       缺点：兼容性不好

                axios：第三方库（支持npm下载和cnd引入）

            3.14  计算属性
                为了代码的整洁性，可维护性，引入的计算属性，原则：定义起来像方法，使用起来像属性，见3_14
                计算属性和函数方法的区别：
                        计算属性所涉及的状态发生变化，计算属性就会再次调用，并且在模板中多个地方使用到相同的计算属性，计算属性只会执行一次，让后将结果缓存到内存，效率极大的提升
                        而方法，只要被调用 就会执行，效率低

            3.15 利用计算属性 重构模糊查询  见3_15.html  （3.8的小技巧 重构）
                知识点：只要计算属性中涉及的状态发生改变，计算属性就会被调用
                        并且计算属性还可以在表达式里面被调用，这是方法不具备的






